/**
 * @fileoverview Like `npm publish` but replaces package dependencies specified
 *     by local paths with their version so that we can publish to npm.
 */
'use strict';
var co = require('co');
var denodeify = require('promise').denodeify;
var detectDependencyGraph = require('./util/detect_dependency_graph');
var isLocalPath = require('./util/is_local_path');
var manifest = require('' + process.cwd() + '/package.json');
var mkdir = denodeify(require('tmp').dir);
var path = require('path');
var ncp = denodeify(require('ncp').ncp);
var npm = require('npm');
var writeFile = require('mz/fs').writeFile;

module.exports = co.wrap(regeneratorRuntime.mark(function publish(args) {
  var graph, dir, result;
  return regeneratorRuntime.wrap(function publish$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        graph = detectDependencyGraph(process.cwd());

        ['dependencies', 'devDependencies'].forEach(function (dependencyType) {
          var dependencies = manifest[dependencyType];
          if (!dependencies) {
            return;
          }

          for (var name in dependencies) {
            var version = dependencies[name];
            if (!isLocalPath(version)) {
              continue;
            }

            // Check which version of this local package is in the tree.
            var dependencyPath = path.normalize('' + process.cwd() + '/' + version.substring(5));
            var dependencyManifest = require('' + dependencyPath + '/package.json');
            dependencies[name] = dependencyManifest.version;
          }
        });

        context$1$0.next = 4;
        return mkdir();

      case 4:
        dir = context$1$0.sent;
        context$1$0.next = 7;
        return ncp(process.cwd(), dir);

      case 7:
        context$1$0.next = 9;
        return writeFile('' + dir + '/package.json', JSON.stringify(manifest));

      case 9:
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return denodeify(npm.load)();

      case 12:
        npm.config.set('registry', args.registry);
        context$1$0.next = 15;
        return denodeify(npm.publish)(dir);

      case 15:
        result = context$1$0.sent;
        context$1$0.next = 22;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t0 = context$1$0['catch'](9);

        console.error(context$1$0.t0);
        return context$1$0.abrupt('return', Promise.reject(context$1$0.t0));

      case 22:

        console.log(result);

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, publish, this, [[9, 18]]);
}));
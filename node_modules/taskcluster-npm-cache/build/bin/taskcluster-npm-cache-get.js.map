{"version":3,"sources":["../../src/bin/taskcluster-npm-cache-get.js"],"names":[],"mappings":"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","file":"src/bin/taskcluster-npm-cache-get.js","sourcesContent":["#! /usr/bin/env node\n\n// This module is the entrypoint so it needs to import the polyfill...\nimport 'babel/polyfill';\n\nimport { ArgumentParser } from 'argparse';\nimport taskcluster from 'taskcluster-client';\nimport fs from 'fs';\nimport fsPath from 'path';\nimport Debug from 'debug';\nimport eventToPromise from 'event-to-promise';\nimport hash from '../hash';\nimport signature from '../signature';\nimport npm from '../npm';\nimport temp from 'promised-temp';\nimport run from '../run';\n\nlet debug = new Debug('npm-cache:get');\nlet parser = new ArgumentParser();\nparser.addArgument(['--namespace'], {\n  defaultValue: 'npm_cache',\n  help: `\n    Index namespace to use\n  `\n});\n\nparser.addArgument(['--target'], {\n  defaultValue: process.cwd(),\n  help: `\n    Location where to create node_modules\n  `\n});\n\nparser.addArgument(['--no-install'], {\n  defaultValue: false,\n  dest: 'noInstall',\n  help: `\n    Skip running npm install after fetching and extracting.\n    If you think you need to use this, you're probably wrong.\n  `\n})\n\nparser.addArgument(['package'], {\n  help: 'path to package.json',\n  type: function(path) {\n    path = fsPath.resolve(path);\n    if (!fs.existsSync(path)) {\n      throw new Error(`\"${path}\" cannot be found`)\n    }\n    return path;\n  }\n});\n\nasync function expandCacheNodeModules(url, modules) {\n  let dir = await temp.mkdir('npm-cache');\n}\n\nasync function main() {\n  let args = parser.parseArgs(process.argv.slice(2));\n  let index = new taskcluster.Index();\n  let queue = new taskcluster.Queue();\n\n  let pkgText = fs.readFileSync(args.package, {encoding: 'utf8'});\n  let pkgHash = hash(pkgText.trim());\n  let namespace = `${args.namespace}.${signature()}.${pkgHash}`\n\n  debug('Package hash =', pkgHash);\n  debug('Package namespace =', namespace);\n\n  // Check to see if we already have this package json cached...\n  let indexedTask;\n  try {\n    indexedTask = await index.findTask(namespace);\n  } catch (e) {\n    if (!err.statusCode || err.statusCode !== 404) throw e;\n  }\n\n  if (!indexedTask) {\n    debug('Cache miss! Falling back to npm install.');\n    await run('npm', ['install']);\n    return;\n  }\n\n  let url = await queue.buildUrl(\n    queue.getLatestArtifact,\n    indexedTask.taskId,\n    'public/node_modules.tar.gz'\n  );\n\n  let workspace = await npm(args.target);\n  await workspace.extract(url, args.target);\n\n  // Optionally skip 'npm install' if requested.\n  if (args.noInstall) {\n    return;\n  }\n\n  await run('npm', ['install']);\n}\n\nmain().catch((e) => {\n  process.nextTick(() => {\n    console.error('Something is wrong...');\n    throw e;\n  })\n});\n\n"]}
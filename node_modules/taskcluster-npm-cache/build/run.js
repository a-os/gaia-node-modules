"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

module.exports = callee$0$0;

var spawn = require("mz/child_process").spawn;

var wait = _interopRequire(require("event-to-promise"));

var assert = _interopRequire(require("assert"));

function callee$0$0(cmd) {
  var argv = arguments[1] === undefined ? [] : arguments[1];
  var opts = arguments[2] === undefined ? {} : arguments[2];

  var proc, _ref, _ref2, exit;

  return regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        assert(Array.isArray(argv), "argv must be an array");
        opts.stdio = opts.stdio || "inherit";
        proc = spawn(cmd, argv, opts);
        context$1$0.next = 5;
        return wait(proc, "exit");

      case 5:
        _ref = context$1$0.sent;
        _ref2 = _slicedToArray(_ref, 1);
        exit = _ref2[0];

        if (!(exit != 0)) {
          context$1$0.next = 10;
          break;
        }

        throw new Error("Failed running " + cmd + " " + argv.join(" ") + " code: " + exit);

      case 10:
      case "end":
        return context$1$0.stop();
    }
  }, null, this);
}
//# sourceMappingURL=run.js.map
{"version":3,"sources":["../src/npm.js"],"names":[],"mappings":";;;;;;;;;;;iBA0F8B,IAAI;;IA1F3B,IAAI,2BAAM,eAAe;;IACzB,GAAG,2BAAM,QAAQ;;IACjB,SAAS,2BAAM,WAAW;;IAC1B,cAAc,2BAAM,kBAAkB;;IACtC,KAAK,2BAAM,OAAO;;IAClB,GAAG,2BAAM,OAAO;;IACd,MAAM,WAAQ,MAAM,EAApB,MAAM;;IACR,EAAE,2BAAM,OAAO;;IACf,MAAM,2BAAM,MAAM;;IAElB,QAAQ,2BAAM,UAAU;;IACxB,cAAc,2BAAM,iBAAiB;;AAE5C,IAAI,KAAK,GAAG,KAAK,CAAC,qBAAqB,CAAC,CAAC;;IAEnC,SAAS;AACF,WADP,SAAS,CACD,GAAG,EAAE;0BADb,SAAS;;AAEX,QAAI,CAAC,GAAG,GAAG,GAAG,CAAC;GAChB;;eAHG,SAAS;AAQP,WAAO;;;;;;aAAA;;;;;;;qBACL,SAAS,CAAC,GAAG,CAAC,CAAC,MAAK,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;;;;;;;OAChD;;AAKK,WAAO;;;;;;aAAA,iBAAC,GAAG,EAAE,MAAM;YAEnB,IAAI,EAEJ,GAAG;;;;AAHP,mBAAK,CAAC,SAAS,EAAE,EAAE,GAAG,EAAH,GAAG,EAAE,MAAM,EAAN,MAAM,EAAE,CAAC,CAAC;AAC9B,kBAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,qBAAqB,CAAC;AAEjD,iBAAG,GAAG,QAAQ,EAAE,CAClB,GAAG,CAAC,GAAG,CAAC,CACR,IAAI,CAAC,MAAM,CAAC,CACZ,GAAG,CAAC,cAAc,EAAE,CAAC;;qBAEjB,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;;;;qBAI5B,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;;;;;;;OACjD;;AAMK,WAAO;;;;;;;aAAA,iBAAC,GAAG;;;YACX,OAAO;;;;AAAP,qBAAO,GAAG,MAAM,CAAC,IAAI,CAAC,MAAK,GAAG,EAAE,cAAc,CAAC;;qBAEzC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;;;;;;;;oBACpB,IAAI,KAAK,CAAC,gDAAgD,CAAC;;;;qBAG7D,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;;;qBAI1C,GAAG,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,EAAE;AAC5B,mBAAG,EAAE,MAAK,GAAG;eACd,CAAC;;;;;;;OACH;;AAKK,aAAS;;;;;;aAAA;;;YACT,WAAW,EAKX,UAAU;;;;AALV,yBAAW,GAAG,MAAM,CAAC,IAAI,CAAC,MAAK,GAAG,EAAE,cAAc,CAAC;;qBAC5C,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC;;;;;;;;oBACzB,IAAI,KAAK,CAAC,6CAA6C,CAAC;;;AAG5D,wBAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAK,GAAG,EAAE,qBAAqB,CAAC;;qBAIvD,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,cAAc,CAAC,EAAE;AACpD,mBAAG,EAAE,MAAK,GAAG;eACd,CAAC;;;kDAEK,UAAU;;;;;;;OAClB;;;;SArEG,SAAS;;;AA2EA,SAAe,IAAI;MAC5B,GAAG;;;;;eAAS,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;;;AAAnC,WAAG;;AACP,aAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;4CAClB,IAAI,SAAS,CAAC,GAAG,CAAC;;;;;;;CAC1B","file":"src/npm.js","sourcesContent":["import temp from 'promised-temp';\nimport del from 'delete';\nimport denodeify from 'denodeify';\nimport eventToPromise from 'event-to-promise';\nimport Debug from 'debug';\nimport run from './run';\nimport { format } from 'util';\nimport fs from 'mz/fs';\nimport fsPath from 'path';\n\nimport download from 'download';\nimport downloadStatus from 'download-status';\n\nlet debug = Debug('npm-cache:workspace');\n\nclass Workspace {\n  constructor(dir) {\n    this.dir = dir;\n  }\n\n  /**\n  Destroy all temporary assets created.\n  */\n  async destroy() {\n    await denodeify(del)(this.dir, { force: true });\n  }\n\n  /**\n  Extract package from remote target into given directory.\n  */\n  async extract(url, target) {\n    debug('extract', { url, target });\n    let path = fsPath.join(target, 'node_modules.tar.gz');\n\n    let req = download().\n      get(url).\n      dest(target).\n      use(downloadStatus())\n\n    await denodeify(req.run).call(req);\n\n    // XXXAus: We should get rid of this in favor of a platform agnostic\n    //         module.\n    await run('tar', ['zxf', path], { cwd: target });\n  }\n\n  /**\n  Update or install node modules associated with the package json URL\n  provided.\n  */\n  async install(pkg) {\n    let pkgPath = fsPath.join(this.dir, 'package.json');\n\n    if (await fs.exists(pkgPath)) {\n      throw new Error('Cannot run install twice (package.json exists)');\n    }\n\n    await fs.writeFile(pkgPath, JSON.stringify(pkg));\n\n    // XXX: We may want to sanitize parts of this such as scripts which\n    //      effectively lets you run untrusted code.\n    await run('npm', ['install'], {\n      cwd: this.dir\n    });\n  }\n\n  /**\n  Create a new tar containing node_modules and return path.\n  */\n  async exportTar() {\n    let modulesPath = fsPath.join(this.dir, 'node_modules');\n    if (!await fs.exists(modulesPath)) {\n      throw new Error('No modules to export (node_modules missing)');\n    }\n\n    let exportPath = fsPath.join(this.dir, 'node_modules.tar.gz')\n\n    // XXXAus: We should get rid of this in favor of a platform agnostic\n    //         module.\n    await run('tar', ['czf', exportPath, 'node_modules'], {\n      cwd: this.dir\n    });\n\n    return exportPath;\n  }\n}\n\n/**\nInitialize the workspace with a temp directory.\n*/\nexport default async function init() {\n  let dir = await temp.mkdir('npm-cache');\n  debug('create: %s', dir);\n  return new Workspace(dir);\n}\n"]}